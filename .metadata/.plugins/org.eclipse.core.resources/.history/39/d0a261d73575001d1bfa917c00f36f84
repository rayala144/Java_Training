package com.fileexplorer.network.copy;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import com.fileexplorer.main.SearchEngineMain;

public class ServerThread extends Thread {
	private Socket socket;
	private ArrayList<ServerThread> threadList;
	private PrintWriter output;

	public ServerThread(Socket socket, ArrayList<ServerThread> threads) {
		this.socket = socket;
		this.threadList = threads;
	}

	@Override
	public void run() {
		try {
			// Reading the input from Client
			BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));

			// returning the output to the client : true statement is to flush the buffer
			// otherwise
			// we have to do it manually
			output = new PrintWriter(socket.getOutputStream(), true);

			// infinite loop for server
			while (true) {
				String inputString = input.readLine();
				// if user types exit command
				if (inputString.equals("exit")) {
					break;
				} else if ((inputString.length() >= 6) && ((inputString.charAt(inputString.length() - 4) == '.')
						|| (inputString.charAt(inputString.length() - 5) == '.'))) {
					System.out.println("Client requested for searching file " + inputString);
					SearchEngineMain s = new SearchEngineMain();
					List<String> paths = s.mainSearch(inputString);
					String outputString = "Location: " + paths;
					System.out.println(outputString);
					output.println(outputString);
					outputString = "";
				}
				// printToALlClients(outputString);
				// output.println("Server says " + outputString);
				
			}

		} catch (Exception e) {
			System.out.println("Error occured " + e.getStackTrace());
		}
	}

	
}
